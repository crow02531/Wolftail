buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'net.wolftail'
archivesBaseName = 'wolftail-1.12.2'
version = '0.3.0'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg '-torg.spongepowered.asm.launch.MixinTweaker'
            arg '-username=Player001'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    implementation 'org.spongepowered:mixin:0.8.3'

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

mixin {
    add sourceSets.main, 'mixins.wolftail.refmap.json'

    config 'mixins.wolftail.core.json'
    config 'mixins.wolftail.renderer.json'
    config 'mixins.wolftail.tracker.json'
}

jar {
    manifest {
        attributes([
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
            "ForceLoadAsMod": "true"
        ])
    }
}

import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonObject

import org.gradle.api.execution.TaskExecutionGraph

Gson gson = new GsonBuilder()
    .setPrettyPrinting()
    .create();

processResources.doLast {
    fileTree(processResources.destinationDir).each {
        if(it.name.startsWith('mixins.') && it.name.endsWith('.json')) {
            def obj = gson.fromJson(it.text, JsonObject.class)

            obj.addProperty 'refmap', 'mixins.wolftail.refmap.json'

            it.text = gson.toJson(obj)
        }
    }
}

gradle.addListener new TaskExecutionGraphListener() {

    void graphPopulated(TaskExecutionGraph graph) {
        genVSCodeRuns.doLast {
            def file_launch = file('.vscode/launch.json')
            def obj = gson.fromJson(file_launch.text, JsonObject.class)

            obj.get('configurations').forEach {
                it.addProperty 'shortenCommandLine', 'none'
            }

            file_launch.text = gson.toJson(obj)
        }
    }
}

jar.finalizedBy('reobfJar')
